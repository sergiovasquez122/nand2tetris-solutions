// argument 1
@ARG
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pointer 1
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// that 0
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
M=D
// constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// that 1
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
A=A+1
M=D
// argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@SP
M=M-1
@SP
A=M
D=M
@R13
D=D-M
@SP
A=M
M=D
@SP
M=M+1
// argument 0
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
(MAIN_LOOP_START)
// argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
@SP
A=M
D=M
@COMPUTE_ELEMENT
D;JNE
@END_PROGRAM
0;JMP
(COMPUTE_ELEMENT)
// that 0
@THAT
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// that 1
@THAT
A=M
A=A+1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@SP
M=M-1
@SP
A=M
D=M
@R13
D=D+M
@SP
A=M
M=D
@SP
M=M+1
// that 2
@SP
M=M-1
@SP
A=M
D=M
@THAT
A=M
A=A+1
A=A+1
M=D
// pointer 1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@SP
M=M-1
@SP
A=M
D=M
@R13
D=D+M
@SP
A=M
M=D
@SP
M=M+1
// pointer 1
@SP
M=M-1
@SP
A=M
D=M
@THAT
M=D
// argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@SP
M=M-1
@SP
A=M
D=M
@R13
D=D-M
@SP
A=M
M=D
@SP
M=M+1
// argument 0
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@MAIN_LOOP_START
0;JMP
(END_PROGRAM)
