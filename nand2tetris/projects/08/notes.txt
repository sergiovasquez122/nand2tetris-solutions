function f nVars

// can be written as
write_label(f)
for(int i = 0;i < nVars;i++)
    write_constant(0);

call f nArgs
// can be written as

// stores the return address
@returnAddress // requires us to generate a label then add @ in the beginning
D=A
addToStack()
incrementStackPointer()
// save the caller's LCL
@LCL
D=M
addToStack()
incrementStackPointer();
// save the caller's ARG
@ARG
D=M
addToStack();
incrementStackPointer();
// save the caller's THIS
@THIS
D=M
addToStack();
incrementStackPointer();
// save the caller's THAT
@THAT
D=M
addToStack();
incrementStackPointer();
// ARG = SP - 5 - nARGS
@SP
D=M
@ARG
M=D
@5
D=A
@ARG
M=M-D
@nARGS
D=A
@ARG
M=M-D
// LCL = SP
@SP
D=M
@LCL
M=D
// go to f
@f
0;JMP
(returnAddress) // when f returns it will pop the return address and get us to here.

return

// how this can be written

// frame = LCL
@LCL
D=M
@R13
M=D
// retAddress = *(frame-5)
@R13
D=M
for(int i = 0;i < 5;i++)
    D=D-1
A=D
D=A
@R14
M=D
// *ARG = POP()
decrementStackPointer()
retrieveValueFromStack()
@ARG
A=M
M=D
// SP = ARG + 1
@ARG
A=M
A=A+1
D=A
@SP
M=D
// THAT = *(frame - 1)
@R13
D=M
for(int i = 0;i < 1;i++)
    D=D-1
A=D
D=A
@THAT
M=D
// THIS = *(frame - 2)
@R13
D=M
for(int i = 0;i < 2;i++)
    D=D-1
A=D
D=A
@THIS
M=D
// ARG =  *(frame - 3)
@R13
D=M
for(int i = 0;i < 2;i++)
    D=D-1
A=D
D=A
@ARG
M=D
// LCL =  *(frame - 4)
@R13
D=M
for(int i = 0;i < 2;i++)
    D=D-1
A=D
D=A
@LCL
M=D
// goto retAddr
@R14
A=M
0;JMP

// how the bootstrap code can be written
// ie.
// SP = 256
// call sys.init

// this set SP to 256
@256
D=A
@SP
M=D
// this will call sys.init
// assume that we already written the call command
// this will allow us to leverage it for this case
writeCall("sys.init", 0);