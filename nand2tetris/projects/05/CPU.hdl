// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
    // Multiplexer to take in instruction and determine whether it is an A or C instruction
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=muxoutForRegister);

    Or(a=Ainstruction, b=instruction[5], out=loadA);
    ARegister(in=muxoutForRegister, load=loadA,out=aRegisterOut,out[0..14]=addressM);

    // Multiplexer to determine whether to use address register or memory
    And(a=instruction[15], b=instruction[12], out=muxBit);
    Mux16(a=aRegisterOut, b=inM, sel=muxBit, out=muxOutForALU);

    // DRegister whose content will be fed into the alu
    And(a=instruction[15], b=instruction[4], out=dLoaded);
    DRegister(in=aluOutput, load=dLoaded, out=dRegisterOut);

    ALU(x=dRegisterOut,y=muxOutForALU,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOutput,out=outM,zr=zr,ng=ng);

    And(a=instruction[3], b=instruction[15], out=writeM);
    // J function will be computed here
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);

    And(a=instruction[2], b=ng, out=part1);

    And(a=instruction[1], b=zr, out=middle);
    And(a=middle, b=notng, out=part2);

    And(a=instruction[0], b=notng, out=middle1);
    And(a=middle1, b=notzr, out=part3);

    Or(a=part1, b=part2, out=part1orpart2);
    Or(a=part1orpart2, b=part3, out=jumpFunction);
    And(a=instruction[15], b=jumpFunction, out=jload);
    PC(in=aRegisterOut, reset=reset, load=jload, inc=true, out[0..14]=pc);
}
