languages extensions / standard library

- mathematical operations
- abstract data types
- input function
- textual output
- graphics output

system oriented services

- memory management
- file system
- I/O device drives
- UI management
- multi-tasking
- networking(no man or women is an island, we expect computers to be able to communicate with other computers)
- security

Jack OS
- consists of 8 classes
-- Math class
-- Memory class
-- Screen class
-- Output class
-- Keyboard class
-- String class
-- Array class
-- Sys class

Take home lessons
- Run-time analysis
- Resource allocation
- Input handling
- Vector graphics
- Textual outputs
- Type conversions
- String processing
- ...

Methodology
- Classical algorithms
- Ingenious hacks
- Implementation notes

Class Math {
  function void init()
  function int abs(int x)
  function int multiply(int x, int y)
  function int divide(int x, int y)
  function int min(int x, int y)
  function int max(int x, int y)
  function int sqrt(int x)
}

- Efficiency matters!!!
-- The lower the service is in the software hierarchy you want it
    to be as efficient as possible.

/**
  returns x * y, where x, y >=0
  strategy: repetitive addition

  running time:
  O(y), y = O(2**n), where n is the bitwidth to represent y
  O(2**n)
*/
multiply(x, y):
  sum = 0
  for i = 0 ... y - 1 do
      sum = sum + x
  return sum

/**
  return x * y, where x, y >= 0
  strategy: grade-school multiplication

  running time:
  O(n) where is the bitwidth to represent y
*/
multiply(x, y):
  sum = 0
  shifted_x = x
  for i = 0 ... y - 1 do
      if(bit(y, i) == 1)
        sum = sum + shifted_x
      shifted_x = shifted_x * 2
  return sum

- The algorithm involves only addition operations
- Can be implemented efficiently in either software or hardware

Running time

Why is log_2(n) attractive?
- because log_2(2 * n) = log_2(n) + 1
- As the size of the input doubles, an algorithm with
  logarithmic running-time requires 1 additional step

Mathematical Operations

Class Math {
    function void init()
    function void abs(int x)
    function void multiply(int x, int y) // shown two different multiplication algorithms, one was naive the other was clever.
    function int divide(int x, int y)
    function int min(int x, int y)
    function int max(int x, int y)
    function int sqrt(int x)
}

Division

/**
    returns the integer part of x / y
    where x >= 0 and y >= 0
    strategy: repetitive subtraction

    O(x)
    O(2**n)
**/
divide(x, y)
    div = 0
    rem = x
    while rem <= x
        rem = rem - y
        div = div + 1
    return div

/**
    return the integer part of x / y
    where x >= 0 and y >= 0
    strategy: grade-school division

   O(n)
**/
divide(x, y):
    if (y > x) return 0
    q = divide(x, 2 * y)
    if((x - 2 * q * y) < y)
        return 2 * q
    else
        return 2 * q + 1

Square root

- its inverse function can be easily computed
- it is monotonically increasing function
therefore:
- square roots can be computed using binary search
- and the running-time of binary search is logarithmic.

sqrt(x):
    y = 0
    for j = n / 2 - 1 ... 0 do
        if (y + 2**j)**2 <= x then y = y + 2**j
    return y

remaining functions are trivial and will not
be discussed

Implementation notes

multiplication
issues
- how to handle negative numbers?
    -- If the inputs are two's complement
       values, the algorithm work fine as-is
- how to handle overflow?
    -- This algorithm always returns the correct answer
        module 2**16
    -- digit it will give you will be the right ones
- how to implement of (ith bit of y) quickly?
    -- use a function to encapsulate this operation
       function boolean bit(int x, int i)

    -- The bit(x, y) can be implemented using bit shifting operations
        which jack does not
    -- Instead, we can use an array that holds the values 2**i, i - 0, 0... 15
    --- a fixed array
    --- declared as a static class variable of Math constructed by Math.init
    --- can support the implementation of bit(x, i)
    --- init stage build all types of data structures OS will use in its operation

division
issues
- how to handle negative number?
-- divide absolute values of inputs then
    set the result's sign.
-- four possibilities
- how to handle overflow?
-- the overflow can be detected when y becomes negative
-- we can change the function's first statement to :
    if (y > x) or (y < 0) return 0

square root
issues
-- how to handle overflow?
add (y + 2)**j > 0

Memory access

application programs
- Access the RAM via abstractions
- Access the I/O devices via abstractions

How to implement these abstractions
- The OS provides low-level services that facilitate direct RAM access


class Memory {
    function int peek(int address)

    function void poke(int address, int value)
}

class Memory {
    static array ram;

    function void init(){
        let ram = 0 // exactly what we wants
        // we have complete access to the RAM
        // let add = ram[idx], place exactly where we want
        // accessing ram[i] = 0 + i in RAM

    }
}

Class String{

    field Array arr;
    field int length;

    constructor String new(int newLength){
        let str = Array.new(newLength);
        let length = 0;
        return this;
    }

    method void dispose()

    method int length()

    method char charAt(int i)

    method void setCharAt(int j, char c)

    method String appendChar(char i)

    method void eraseLastChar()

    method int intValue()

    method void setValue(int num)

    function char newLine()

    function char backSpace()

    function char doubleQuote()

}

// length, charAt, setCharAt, appendChar, eraseLastChar can be easily done using array manipulations.
// newline, backSpace, doubleQuote return 128, 129, 34
// this works because jack is a weakly typed language
// doing this gives us the capacity to get into ram
// if the programmer doesn't know what they are doing
// they could mess up the computer.
// such is the power of system programmers.

/** A library of basic system services */
class Sys{
    /* Performs all the initialization required by the OS */
    function void init(){

    }

}

Class Array {
    function Array new(int size); // implemented as a function, not as a construction. uses Memory.alloc, return memory address. very trivial function to implement.
    method void dispose(); // uses Memory.dealloc, very trivial easy function to implement
}



Hardware contract
When the computer is reset, execution with the instruction in ROM[0]

VM contract
The following code should be placed at the top of the ROM, beginning in ROM[0];
sp = 256
call Sys.init

Jack contract
Program execution starts with the function Main.main()

OS contract
Sys.init should initialize the OS, and then call Main.main()

class Sys {

    /** Performs all the initialization required by the OS */
    function void init(){
        do Math.init()
        do Memory.init()
        do Screen.init()
        ...
    }

    function void halt(){
        while(true){

        }
    }

    function void wait(int duration){
        // can be implemented using a loop, machine-specific
    }

    // "ERR<errorCode>" and halts
    function void error(int errorCode){}
}

// when you come back from the exploration you understand more then when you started

// OS abstractions
// OS abstraction: specified by the Jack OS API
// example Screen class
// describe the class functionality
// application developer can use the screen functions to do the activity they would like
// we would be content with that view if we were users
// in nand2tetris we want to delve deeper and understand how the functionality works
//
// Suppose you wish to implement an existing OS
// the OS consists of n executable modules, with high inter-dependency
// strategy:
// for each module in the OS, implement the module separately.
// using the remaining n - 1 executable modules to service it.
// after n stages you will have develop the whole operating system yourself.
// developed own versions using reverse engineering.

// Perspective:
// What are the major differences between the Jack operating system and regular operating systems.
// Jack OS does not support multi-threading nor does it multi-processing.
// Jack OS also does not support file-systems.
// Most user expect to interface with services via command line interfaces
// additionally gaps such as security not implemented.
// still hides lower-level details from application developer.
// why is Jack so why opened?
// part of the reason course. In other systems OS operations are priviledged.
// in our platform, the user level and the OS code work in the same execution level.
// how does the Jack OS rate in terms of effeciency
// two areas most relevant
// mathematics and graphics
// algorithms for mulitplication and division are effecient.
// in other computers the algorithms above are implemented in hardware not software.
// the running of time multiplication and division are O(n)
// the total running time is O(n**2).
// O(n**2) is not bad at all.
// the line-drawing algorithms presented are quite effecient but are typically implemented via software and GPU.
// offload CPU from high-complex operations.
// no separation in Hack platform.
// Operating systems is a huge area of research and practice. especially in world
// where computation is going bigger.
