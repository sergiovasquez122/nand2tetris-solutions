// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean current_color;
    static Array screen_address;
    static Array powersOfTwo;
    /** Initializes the Screen. */
    function void init() {
      let current_color = true;
      let screen_address = 16384;

  		let powersOfTwo = Array.new(16);
      let powersOfTwo[0] = 1;
      let powersOfTwo[1] = 2;
      let powersOfTwo[2] = 4;
      let powersOfTwo[3] = 8;
      let powersOfTwo[4] = 16;
      let powersOfTwo[5] = 32;
      let powersOfTwo[6] = 64;
      let powersOfTwo[7] = 128;
      let powersOfTwo[8] = 256;
      let powersOfTwo[9] = 512;
      let powersOfTwo[10] = 1024;
      let powersOfTwo[11] = 2048;
      let powersOfTwo[12] = 4096;
      let powersOfTwo[13] = 8192;
      let powersOfTwo[14] = 16384;
      let powersOfTwo[15] = powersOfTwo[14] + powersOfTwo[14];

  		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = 0;
      while(i < 8192){
        let screen_address[i] = false;
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let current_color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, value, valuebit;
      let address =  32 * y + x / 16;
      let value = Memory.peek(16384 + address);
      let valuebit = powersOfTwo[value & 15];
      if(color){
        let value = value | valuebit;
      } else {
        let value = value & (~valuebit);
      }
      do Memory.poke(address, value);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
