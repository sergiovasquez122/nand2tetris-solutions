// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bitField;

    /** Initializes the library. */
    function void init() {
      var int i;
      var int current_idx;
      bitField = Array.new(16);
      let i = 1;
      let current_idx = 1;
      while(i < 16){
        let bitField[i] = current_idx;
        let i = i + 1;
        let current_idx = current_idx + current_idx;
      }
      return;
    }

    function boolean bit(int x, int i){
      var int return_value;
      let return_value = x & bitField[i];
      return return_value;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if(x < 0){
        return -x;
      } else {
        return x;
      }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int i;
      var int sum;
      var int shifted_x;
      let i = 0;
      let sum = 0;
      let shifted_x = x;
      while(i < 16){
        let ith_bit_of_y = do Math.bit(y, i);
        if(ith_bit_of_y = 1){
          let sum = sum + shifted_x;
        }
        let shifted_x = shifted_x + shifted_x;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var boolean x_negative;
      var boolean y_negative;
      var int x_abs;
      var int y_abs;
      let x_negative = x < 0;
      let y_negative = y < 0;
      let x_abs = do Math.abs(x);
      let y_abs = do Math.abs(y);
      if(x_negative & y_negative){
        return do Math.divide_helper(x_abs, y_abs);
      } 
    }

    function int divide_helper(int x, int y){
      var int q;
      if(y > x){
        return 0;
      }
      let q = do Math.divide(x, y + y);
      if((x - 2 * q * y) < y){
        return 2 * q;
      } else {
        return 2 * q + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int lo;
      var int hi;
      var int mid;
      var int sqr;
      let lo = 0;
      let hi = x;
      while(~(lo > hi)){
        let mid = (lo + hi) / 2;
        let sqr = mid + mid;
        if(sqr < x) {
          let lo = mid + 1;
        }
        if(sqr > x){
          let hi = mid - 1;
        }
        if(sqr = x){
          return mid;
        }
      }
      return lo;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if(a > b){
        return a;
      } else {
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if(a < b){
        return a;
      } else {
        return b;
      }
    }
}
