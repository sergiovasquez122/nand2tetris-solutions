// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array arr;
    field int myLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let arr = Array.new(maxLength);
      let myLength = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do arr.dispose();
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return myLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let arr[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let myLength = myLength + 1;
      let arr[myLength] = c;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let myLength = myLength - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val;
      var int d;
      var int i;
      let val = 0;
      let i = 0;
      while(i < myLength){
        let d = arr[i] - 48;
        let val = (val * 10) + d;
        let i = i + 1;
      }
      return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int quotient;
      var int remainder;
      var char charRepresentation;
      let myLength = 0;
      if(val < 0){
        do appendChar("-");
        let val = Math.abs(val);
      }
      let quotient = val / 10;
      let remainder = (val - (quotient * 10));
      let charRepresentation = String.digit_char(remainder);
      if(val < 10){
        do appendChar(charRepresentation);
        return;
      } else {
        do setInt(quotient);
        do appendChar(charRepresentation);
        return;
      }
    }

    function char digit_char(int i) {
      return i + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
