// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array arr, freeList;
    /** Initializes the class. */
    function void init() {
      let arr = 0;
      let freeList = 2048;
      let freeList[0] = null;
      let freeList[1] = 14334;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return arr[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let arr[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array prev, next, returnedSegment;
      var int allocSize;
      let allocSize = size + 2;
      if(freeList = null){
        do Sys.error(5);
        return 0;
      }
      if(freeList[1] = allocSize){
        let returnedSegment = freeList;
        let freeList = null;
        return returnedSegment + 2;
      }
      if(freeList[1] > allocSize){
          let freeList[1] = freeList[1] - allocSize;
          let returnedSegment = freeList + freeList[1] + 2;
          let returnedSegment[0] = null;
          let returnedSegment[1] = size;
          return returnedSegment + 2;
      }
      let prev = freeList;
      let next = freeList[0];
      while((~(next = null)) & (next[1] < allocSize)){
        let prev = next;
        let next = next[0];
      }
      // return a failure if we could not find a segment to support the
      // user request
      if(next = null){
        do Sys.error(5);
        return 0;
      }
      if(next[1] = allocSize){
        let prev[0] = next[0];
        let next[0] = null;
        let returnedSegment = next;
      } else{
        let next[1] = next[1] - allocSize;
        let returnedSegment = next + next[1] + 2;
        let returnedSegment[0] = null;
        let returnedSegment[1] = size;
      }
      // offsets by two to hide the overhead variables
      // 1. next pointer
      // 2. size of the block
      return returnedSegment + 2;
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array segment;
      let segment = o - 2;
      let segment[0] = freeList;
      let freeList = segment;
      return;
    }
}
